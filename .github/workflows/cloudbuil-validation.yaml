name: Google Cloud Build Emulation

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  cloud-build-validate:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'beta'
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Create temporary directory for build artifacts
        run: mkdir -p /tmp/cloudbuild-artifacts
      
      - name: Run actual Cloud Build local emulator (without dryrun)
        id: cloud-build-validate
        run: |
          echo "Running Cloud Build emulation with actual builds..."
          
          gcloud beta builds submit \
            --config=cloudbuild.yaml \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --substitutions=_COMMIT_SHA=${{ github.sha }},PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},COMMIT_SHA=${{ github.sha }} \
            --local-cloudbuild=/tmp/cloudbuild-artifacts \
            --no-source \
            --no-push
          
          echo "Cloud Build validation completed successfully"
      
      - name: Extract build details
        if: success()
        run: |
          echo "✅ Cloud Build configuration validated successfully!"
          echo "All build steps were executed successfully."
          
          # Print the steps that were executed
          echo "Steps that were executed:"
          cat cloudbuild.yaml | grep "name\|id:" | sed 's/^[ \t]*/    /'
      
      - name: Validate Dockerfiles
        run: |
          echo "Validating Dockerfiles referenced in cloudbuild.yaml..."
          
          # Check WebAPI Dockerfile
          if [ -f backend/code/Server/WebAPI/Dockerfile ]; then
            echo "✅ WebAPI Dockerfile exists"
          else
            echo "❌ WebAPI Dockerfile missing!"
            exit 1
          fi
          
          # Check Receiver Dockerfile
          if [ -f backend/code/Server/ReceiverService/Dockerfile ]; then
            echo "✅ Receiver Dockerfile exists"
          else
            echo "❌ Receiver Dockerfile missing!"
            exit 1
          fi
          
          # Check Sender Dockerfile
          if [ -f backend/code/Server/SenderService/Dockerfile ]; then
            echo "✅ Sender Dockerfile exists"
          else
            echo "❌ Sender Dockerfile missing!"
            exit 1
          fi
          
          # Check MQTT Dockerfile
          if [ -f mqtt/Dockerfile ]; then
            echo "✅ MQTT Dockerfile exists"
          else
            echo "❌ MQTT Dockerfile missing!"
            exit 1
          fi
          
          # Check Database Dockerfile if used
          if [ -f backend/code/Shared/Database/Dockerfile ]; then
            echo "✅ Database Dockerfile exists"
          else
            echo "⚠️ Database Dockerfile not found, but might be commented out in cloudbuild.yaml"
          fi
          
          echo "All Dockerfiles validated successfully!"